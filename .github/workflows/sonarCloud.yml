name: SonarCloud Analysis

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  sonarcloud:
    name: SonarCloud Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch complete history for accurate blame information
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Debug - Display project structure before build
        run: |
          echo "Project structure:"
          find . -type f -name "pom.xml" | xargs grep -l "jacoco"
          echo "Maven version:"
          mvn --version

      - name: Build and analyze with SonarCloud
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent verify org.jacoco:jacoco-maven-plugin:report sonar:sonar \
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} \
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.java.coveragePlugin=jacoco \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

      - name: Debug - Verify JaCoCo reports exist
        if: always()
        run: |
          echo "Checking for JaCoCo reports..."
          find . -name "jacoco*.xml" -type f
          if [ -f "target/site/jacoco/jacoco.xml" ]; then
            echo "JaCoCo report exists!"
            ls -la target/site/jacoco/
          else
            echo "JaCoCo report NOT found at expected location!"
          fi

      - name: Wait for SonarCloud Quality Gate
        if: success()
        run: |
          # Give SonarCloud time to process the results
          echo "Waiting for SonarCloud to process results..."
          sleep 30
          
          # Query quality gate status with proper error handling
          echo "Checking SonarCloud quality gate status..."
          CURL_RESPONSE=$(curl -s -f -u ${{ secrets.SONAR_TOKEN }}: "https://sonarcloud.io/api/qualitygates/project_status?projectKey=${{ secrets.SONAR_PROJECT_KEY }}" || echo '{"error": "API request failed"}')
          
          if [[ "$CURL_RESPONSE" == *"error"* ]]; then
            echo "❌ Error querying SonarCloud API: $CURL_RESPONSE"
            exit 1
          fi
          
          SONAR_STATUS=$(echo $CURL_RESPONSE | jq -r '.projectStatus.status')
          echo "SonarCloud Quality Gate Status: $SONAR_STATUS"
          
          if [[ "$SONAR_STATUS" != "OK" ]]; then
            echo "❌ Quality Gate failed. PR cannot be merged."
            exit 1
          else
            echo "✅ Quality Gate passed successfully!"
          fi